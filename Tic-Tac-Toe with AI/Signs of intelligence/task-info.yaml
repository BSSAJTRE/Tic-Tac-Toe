type: edu
custom_name: stage4
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;
    import java.util.Random;
    import java.util.Scanner;

    public class Game {
        private Table table;
        final Scanner scanner = new Scanner(System.in);

        public int[] requestCoords() {
            int[] coords = new int[2];
            int x = 0;
            int y = 0;
            while (true) {
                System.out.print("Enter the coordinates: > ");

                String enter = this.scanner.nextLine();

                Scanner enterScanner = new Scanner(enter);

                String error = "";

                if (enterScanner.hasNextInt()) {
                    x = enterScanner.nextInt();
                } else {
                    error = "You should enter numbers!";
                }
                if (enterScanner.hasNextInt()) {
                    y = enterScanner.nextInt();
                } else {
                    error = "You should enter numbers!";
                }

                if (error.isEmpty()) {
                    if (x < 1 || x > 3 || y < 1 || y > 3) {
                        error = "Coordinates should be from 1 to 3!";
                    } else if (this.table.getCell(x - 1, y - 1) != '_') {
                        error = "This cell is occupied! Choose another one!";
                    }
                }

                if (!error.isEmpty()) {
                    System.out.println(error);
                } else {
                    coords[0] = x - 1;
                    coords[1] = y - 1;
                    break;
                }
            }

            return coords;
        }

        public void doStep(int[] coords) {
            int xCount = 0;
            int oCount = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (this.table.getCell(i, j) == 'X') {
                        xCount++;
                    }
                    if (this.table.getCell(i, j) == 'O') {
                        oCount++;
                    }
                }
            }

            char nextSymbol = 'X';
            if (xCount > oCount) {
                nextSymbol = 'O';
            }

            this.table.setCell(coords[0], coords[1], nextSymbol);
        }

        // возврвщает символ 'X' или 'O' или '_', если он повторяется в трех точках иначе '_'
        public char checkRoot(int[] a, int[] b, int[] c) {
            if (this.table.getCell(a[0], a[1]) == this.table.getCell(b[0], b[1]) && this.table.getCell(a[0],a[1]) == this.table.getCell(c[0], c[1])) {
                return this.table.getCell(a[0], a[1]);
            }
            return '_';
        }

        public String getStateGame(){
            // 11 22 33
            // 13 22 31
            // 11 12 13
            // 21 22 23
            // 31 32 33
            // 11 21 31
            // 12 22 32
            // 13 23 33
            int[][][] roots = {
                {{0,0}, {1,1}, {2,2}},
                {{0,2}, {1,1}, {2,0}},
                {{0,0}, {0,1}, {0,2}},
                {{1,0}, {1,1}, {1,2}},
                {{2,0}, {2,1}, {2,2}},
                {{0,0}, {1,0}, {2,0}},
                {{0,1}, {1,1}, {2,1}},
                {{0,2}, {1,2}, {2,2}},
            };

            char rootChar = '_';
            for (int i = 0; i < 8; i++) {
                rootChar = checkRoot(roots[i][0], roots[i][1], roots[i][2]);
                if (rootChar != '_') {
                    break;
                }
            }
            boolean fulledTable = true;
            for (int j = 0; j < 9; j++) {
                fulledTable = fulledTable && this.table.getCell(j / 3, j % 3) != '_';
            }

            if (fulledTable && rootChar == '_') {
                return "Draw";
            } else if(rootChar == 'X') {
                return "X wins";
            } else if (rootChar == 'O') {
                return "O wins";
            }
            return "";
        }

        public int[] getCoordsEaseAI(){
            int[][] vacantPosition = new int[9][2];
            int countVacantPosition = 0;
            for (int i = 0; i < 9; i++) {
                if (this.table.getCell(i / 3, i % 3) == '_') {
                    vacantPosition[countVacantPosition][0] = i / 3;
                    vacantPosition[countVacantPosition][1] = i % 3;
                    countVacantPosition++;
                }
            }

            Random rnd = new Random();
            int indexNextStep = rnd.nextInt(countVacantPosition);

            return vacantPosition[indexNextStep];
        }

        public String stageUser() {
            // stage user
            int[] coords = this.requestCoords();
            this.doStep(coords);
            this.table.printTable();
            return this.getStateGame();
        }

        public String stageAI() {
            // stage AI
            System.out.println("Making move level \"easy\"");
            int[] coordsAi = this.getCoordsEaseAI();
            this.doStep(coordsAi);
            this.table.printTable();
            return this.getStateGame();
        }

        public void menuInput() {
            while(true){
                System.out.print("Input command: > ");
                String[] params = new String[2];
                String enter = this.scanner.nextLine();
                Scanner enterScanner = new Scanner(enter);

                String command = "";
                if(enterScanner.hasNext()) {
                    command = enterScanner.next();
                }
                if(enterScanner.hasNext()) {
                    params[0] = enterScanner.next();
                }
                if(enterScanner.hasNext()) {
                    params[1] = enterScanner.next();
                }

                if(command.equals("start")) {
                    if(params[0] == null || !params[0].equals("easy") && !params[0].equals("user")) {
                        System.out.println("Bad parameters!");
                        continue;
                    }
                    if(params[1] == null || !params[1].equals("easy") && !params[1].equals("user")) {
                        System.out.println("Bad parameters!");
                        continue;
                    }
                    this.start(params[0], params[1]);
                } else if(command.equals("exit")) {
                    break;
                } else {
                    System.out.println("Bad parameters!");
                }
            }
        }

        public String runStage(String stage) {
            String stateGame = "";
            switch (stage){
                case "user": {
                    stateGame = this.stageUser();
                    break;
                }
                case "easy": {
                    stateGame = this.stageAI();
                    break;
                }
            }
            return stateGame;
        }

        public void start(String stageFirst, String stageSecond){
            this.table = new Table();
            this.table.printTable();
            String stateGame;
            while (true) {
                stateGame = this.runStage(stageFirst);
                if (!stateGame.isEmpty()) {
                    break;
                }
                stateGame = this.runStage(stageSecond);
                if (!stateGame.isEmpty()) {
                    break;
                }
            }
            System.out.println(stateGame);
            System.out.println();
        }
    }
  learner_created: true
- name: src/tictactoe/Table.java
  visible: true
  text: |
    package tictactoe;

    public class Table {
        private char[][] cells = new char[3][3];

        public void printTable() {
            System.out.println("---------");
            for (int i = 0; i < 3; i++) {
                System.out.print("| ");
                for (int j = 0; j < 3; j++) {
                    if (this.cells[i][j] == '_') {
                        System.out.print("  ");
                    } else {
                        System.out.print(this.cells[i][j] + " ");
                    }
                }
                System.out.println("|");
            }
            System.out.println("---------");
        }

        public char setCell(int x, int y, char symbol) {
            return this.cells[x][y] = symbol;
        }

        public char getCell(int x, int y) {
            return this.cells[x][y];
        }

        public Table() {
            this.cells = new char[][] {
                    {'_', '_', '_'},
                    {'_', '_', '_'},
                    {'_', '_', '_'}
            };
        }

        public Table(String cells){
            for (int i = 0; i < 9; i++) {
                this.cells[i / 3][i % 3] = cells.charAt(i);
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7437#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 03 Mar 2022 08:37:02 UTC
record: 4
